@page "/"
@inject HttpClient client
@* @rendermode InteractiveWebAssembly *@
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using EZChat.Client.Models
@using EZChat.Client.Contracts
@using Shared.Models;
@using Shared.Enums;
@using Humanizer;

@inject IUploadService _uploadService
@inject IJSRuntime _jsRuntime

<PageTitle>Data Extraction</PageTitle>

<style>
    textarea {
        border: 2px dashed #888;
        */ border-radius: 10px;
        width: 80%;
        overflow: auto;
        background: #f7f7f7;
    }

    /* improved CSS for speech bubbles */

    .Assistant, .User {
        position: relative;
        font-family: arial;
        font-size: 1.1em;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }

        .Assistant:after, .User:after {
            content: '';
            border: 20px solid transparent;
            position: absolute;
            margin-top: -30px;
        }

    .User {
        background: #03a9f4;
        color: #fff;
        margin-left: 20%;
        margin-right: 100px;
        top: 30%;
        text-align: right;
    }

    .Assistant {
        background: #4CAF50;
        color: #fff;
        margin-left: 100px;
        margin-right: 20%;
    }

    .User:after {
        border-left-color: #03a9f4;
        border-right: 0;
        right: -20px;
    }

    .Assistant:after {
        border-right-color: #4CAF50;
        border-left: 0;
        left: -20px;
    }

    .msg {
        font-size: medium;
    }

    .bg-red {
        background-color: #bf0000; /* Dark Red */
    }

    .bg-dark-gray {
        background-color: darkgray;
    }

    .bg-gray {
        background-color: gray;
    }

    .bg-light-gray {
        background-color: lightgray;
    }

    div.token-count {
        background-color: #d6d6d6;
        border: 1px solid black;
        padding: 10px;
        height: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .custom-pill {
        border: 1px solid black;
        background-color: lightgray;
    }

    div.wrapper {
        position: relative;
        border: 2px solid #1b6ec2; /* cornflowerblue; */
        margin-top: 20px;
        padding: 20px 10px 10px;
    }

        div.wrapper label {
            color: white;
            line-height: 20px;
            padding: 0 5px;
            position: absolute;
            background-color: #1b6ec2;
            /*  cornflowerblue; */
            /* Adjust these values to posiytion the title or label */
            top: -10px;
            left: 10px;
        }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 4px solid #f3f3f3; /* Light gray border */
        border-top: 8px solid #3498db; /* Blue top border */
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

</style>

<script>
    window.ScrollToBottom = (elementName) => {
        element = document.getElementById(elementName);
        element.scrollTop = element.scrollHeight - element.clientHeight;
    }

    function disableSubmitButton(buttonId, action) {
        var button = document.getElementById(buttonId);
        if (button) {
            button.disabled = (action === "disable");
        }
    }

    function applyBlur(elementName, blurAmount) {
        element = document.getElementById(elementName);
        element.style.filter = "blur(" + blurAmount + ")";
    }
</script>


@if(Message.Length > 0)
{
    <p class="alert alert-secondary" role="alert">@Message</p>
}


<div class="d-flex flex-column justify-content-between" style="height: 91vh;">

    <!-- Header and Token Count -->
    <div style="display: flex; justify-content: space-between;align-items: center;">
        <div id="name">
            <h1>Data Extraction</h1>
        </div>
        @if (chatMessages.Count > 1)
        {
            <div style="padding: 10px; height: 15px; display: flex; align-items: center; justify-content: center;">
                <span class="me-2 badge rounded-pill bg-light custom-pill" style="color: black;">
                    Total Tokens: @TotalTokens
                </span>
            </div>
        }
    </div>

    @* <div>
        <div class="toast fade show w-100 rounded-3" style="margin-bottom: 25px;">
            <div class="toast fade show w-100 rounded-3">
                <div class="toast-header @("bg-red text-white")">
                    <i class="bi @("bi-lightbulb") me-1" aria-hidden="true"></i>
                    <strong class="me-auto text-capitalize">
                        Suggestions
                    </strong>
                </div>
                <div class="toast-body" style="display: flex; flex-direction: column; justify-content: center;">

                    @foreach (var suggestion in suggestions)
                    {
                        <div style="background-color: #d6d6d6; border: 1px solid black; border-radius: 10px; padding: 10px; margin: 5px;text-align: center;">
                            <a href="/extract" @onclick:preventDefault="true" @onclick="() => AssignToPromptTextArea(suggestion)" style="font-family: arial !important; font-size: 0.9em !important;">@suggestion</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div> *@

    <!-- File Upload UX -->
    <div>


        <div id="upload" class="toast fade show w-100 rounded-3" style="margin-bottom: 25px;">
            <div class="toast-header @("bg-black text-white")" style="margin-bottom: 10px;">
                <i class="bi @("bi-file-earmark-arrow-up") me-1" aria-hidden="true"></i>
                <strong class="me-auto text-capitalize">
                    File Upload Information
                </strong>
            </div>
            <div>
                <EditForm Model="@Ticket" method="post" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <!-- Comment out 'multiple' directive to limit to a single file -->
                    @* <InputFile class="form-control mb-4" multiple OnChange="@OnInputFileChange" style="background-color: #d6d6d6; border: 1px solid black; border-radius: 10px; padding: 20px; width: calc(100% - 40px); margin: auto;" /> *@
                    <InputFile class="form-control mb-4" OnChange="@OnInputFileChange" style="background-color: #d6d6d6; border: 1px solid black; border-radius: 10px; padding: 20px; width: calc(100% - 40px); margin: auto;" />
                </EditForm>

            </div>
            @if (selectedFileNames.Count > 0)
            {
                <div class="form-control mb-4 d-flex flex-row" style="background-color: #d6d6d6; border: 1px solid black; border-radius: 10px; padding: 20px; width: calc(100% - 40px); margin: auto;">
                    <span style="display: flex; flex-direction: row; flex-wrap: wrap;">
                        @foreach (var fileName in selectedFileNames)
                        {
                            <p class="me-3">@fileName</p>
                        }
                    </span>
                </div>
            }
        </div>







        @* <div class="toast fade show w-100 rounded-3" style="margin-bottom: 25px;">   
            <div class="toast-header @("bg-black text-white")" style="margin-bottom: 10px;">
                <i class="bi @("bi-lightbulb") me-1" aria-hidden="true"></i>
                <strong class="me-auto text-capitalize">
                    File Upload Information
                </strong>
            </div>
            <div class="toast fade show w-100 rounded-3;">
                <EditForm Model="@Ticket" method="post" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <InputText class="form-control mb-4" placeholder="Title" @bind-Value="@Ticket.Title" style="background-color: #d6d6d6; border: 1px solid black; border-radius: 10px; padding: 20px; width: calc(100% - 40px); margin: auto; height:15px;" />
                    <InputFile class="form-control mb-4" multiple OnChange="@OnInputFileChange" style="background-color: #d6d6d6; border: 1px solid black; border-radius: 10px; padding: 20px; width: calc(100% - 40px); margin: auto;" />
                </EditForm>
             </div>
        </div> *@
     
    
     </div>
   

    @if (Processing)
    {
        <br>
        <div style="display: flex; justify-content: center; align-items: center;">
            <img src="images/processing.gif" alt="Processing..." />
        </div>

        
    }

    <!-- ChatTurns -->
    <div id="chatcontainer" style="height:70vh; overflow: auto;">
        <!-- New Code ChatTurn Code -->
        <!-- New Code ChatTurn Code -->
        <div class="toast-container position-static w-100 d-flex flex-column align-items-stretch;" style="margin-bottom: 30px;">

            @if (!Processing)
            {
                @foreach (var msg in chatMessages)

                {
                    <div class="toast fade show w-75 rounded-3 @(msg.Role == Role.Assistant ? "align-self-end" : "align-self-start")">
                        <div class="toast-header @(msg.Role == Role.Assistant ? "bg-success text-white" : "bg-primary text-light")">
                            <i class="bi @(msg.Role == Role.Assistant ? "bi-robot" : "bi-person") me-1" aria-hidden="true"></i>
                            <strong class="me-auto text-capitalize">
                                @msg.Role
                            </strong>
                            @if (msg.Tokens > 0)
                            {
                                <span class="me-2 badge rounded-pill bg-light" style="color: black;">
                                    Tokens: @msg.Tokens
                                </span>
                            }
                            <small>
                                @msg.TimeStamp.Humanize()
                            </small>
                        </div>
                        <div class="toast-body">
                            <i class="bi bi-grip-vertical mr-2 text-black-50"></i>
                            @{
                                MarkupString html = new MarkupString(@msg.Content);
                            }
                            @html
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    @if (@ErrorMessage != "")
    {
        <div class="alert alert-danger" role="alert" style="color:red; font-size: large; text-align:center;">
            @ErrorMessage
        </div>
    }

    <!-- Prompt Input-->
    <div class="@("bg-light-gray text-white") text-light px-4 py-3 rounded-top-5 text-dark d-flex flex-column justify-content-center" style="margin-top:20px;">
        <div class="input-group d-flex">
            <i class="bi bi-chat-left-text input-group-text" aria-hidden="true"></i>
            <textarea id="text-area-prompt" rows="3" class="form-control form-control-sm" @bind="prompt" title="Enter your prompt here" style="flex-grow: 1;" />
            <button type="button" class="btn btn-outline-secondary" @onclick="OnSubmit" style="background-color: #f0f0f0;">
                <i class="bi bi-send-fill" aria-hidden="true" style="background-color: #f0f0f0;" title="Ask AI..."></i>
            </button>
            &nbsp;
            <button type="button" class="btn btn-new-chat" @onclick="RestartChatGPT" style="background-color: #f0f0f0;">
                <i class="bi bi-arrow-clockwise" aria-hidden="true" style="background-color: #f0f0f0;" title="Start New Chat Session..."></i>
            </button>
        </div>
    </div>

</div>


@code {
    private WebAssemblyTicket Ticket { get; set; } = new();
    private long maxFileSize = 5120000;
    private string Message { get; set; } = String.Empty;

    List<ChatMessage> chatMessages = new List<ChatMessage>();
    private int PromptTokens = 0;
    private int ResponseTokens = 0;
    private int TotalTokens = 0;
    private bool Processing = false;
    private string ErrorMessage = "";
    private string prompt = """I have uploaded a balance sheet text document. Please extract the following information: 1. Total Assets value 2. Total Liabilities value. The values of Total Assets and Total Liabilities are needed for financial analysis.Please ensure accuracy in identifying and reporting these figures.""";
   
    string[] suggestions;


    private List<string> selectedFileNames = new List<string>();

   protected override void OnInitialized()
   {
        base.OnInitialized();
        suggestions = new string[] { "I have uploaded a balance sheet text document. Please extract the following information: 1. Total Assets value 2. Total Liabilities value. The values of Total Assets and Total Liabilities are needed for financial analysis.Please ensure accuracy in identifying and reporting these figures.",
                                     "Suggestion 2", 
                                     "Suggestion 3" 
                                   };
   }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        
        // selectedFileNames = e.GetMultipleFiles().Select(file => file.Name).ToList();
        
        var singleFile = e.File;
        Ticket.Attachments = e.GetMultipleFiles().ToList();
    }

    private void AssignToPromptTextArea(string suggestion)
    {
        // Assuming promptTextArea is the id of the textarea
        // _jsRuntime.InvokeVoidAsync("document.getElementById('promptTextArea').value = '" + suggestion + "'");
        prompt = suggestion;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Set RenderChatMessages to false to prevent the foreach loop from executing
        //RenderChatMessages = false;

        try
        {
            await _jsRuntime.InvokeAsync<string>(
                "ScrollToBottom", "chatcontainer"
            );
        }
        catch
        {
            // do nothing if this fails
        }
    }

    protected async Task OnSubmit()
    {
        if (string.IsNullOrEmpty(prompt))
        {
            ErrorMessage = "Please ask me something!";
            return;
        }

        if (Ticket.Attachments.Count >= 1)
        {
            // Call your method here
            await ProcessRequest();
            return;

        }
        else
        {
            ErrorMessage = "Please select a File!";
            return;
        }
    }


    private async Task ProcessRequest()
    {
        try
        {
            // Set Processing to true to flag method as processing
            Processing = true;

            // Call StateHasChanged to refresh the UI
            //StateHasChanged();

            // Clear any previous error messages
            ErrorMessage = "";

            // Add the new message to chatMessages
            //chatMessages.Add(new ChatMessage(Role.User, prompt, 0));

            var completion = await _uploadService.UploadDocumentsAsync(Ticket, prompt);

            // Create a new Message object with the response and other details
            // and add it to the messages list
            var choice = completion.Response;

            // Update the total number of tokens used by the API
            PromptTokens = completion.PromptTokens;
            ResponseTokens = completion.ResponseTokens;
            TotalTokens += completion.ResponseTokens + completion.PromptTokens;

            // Add the full prompt which includes document text and prompt text
            chatMessages.Add(completion.ChatHistory[0]);

            // Add the response to the chatMessages
            if (choice != null)
            {
                if (!string.IsNullOrEmpty(choice))
                {
                    chatMessages.Add(new ChatMessage(Role.Assistant, choice, ResponseTokens));
                }
            }

            // Retrofit the number of prompt tokens used
            // Go one message back to corresponding prompt and subtract 1 as zero-based index
            // var index = chatMessages.Count - 2;
            // var promptMessage = chatMessages[index];
            // promptMessage.Tokens = PromptTokens;
            // chatMessages[index] = promptMessage;

            // Grab the ChatHistory from the response
            // chatHistory = completion.ChatHistory;
        } 
        catch(Exception ex)
        {
            // Set ErrorMessage to the exception
            // message if an error occurs
            var buildErrorMessage = ex.Message;
            ErrorMessage = ex.Message;

            // Remove the last message from chatMessages
            chatMessages.RemoveAt(chatMessages.Count - 1);
        }
        finally
        {
            // Clear the prompt variable
            //prompt = "";

            // Set Processing to false to indicate
            // that the method is done processing
            Processing = false;

            // Call StateHasChanged to refresh the UI
            //StateHasChanged();
        }
    }

    private void RestartChatGPT()
    {
        prompt = "Write a 10 word description of Azure OpenAI";
        // chatMessages = new List<ChatMessage>();
        TotalTokens = 0;
        PromptTokens = 0;
        ResponseTokens = 0;
        chatMessages.Clear();
        ErrorMessage = "";
        StateHasChanged();
    }
}




@*              // Code Junkyard
            // List<IBrowserFile> files = Ticket.Attachments;

            // await _uploadService.UploadDocumentsAsync(files);

            // // Ticket.Attachments is of type of List<IBrowserFile>
            // await _uploadService.UploadDocumentsAsync(Ticket.Attachments,
            //                                           Ticket.Title,
            //                                           Ticket.Description);



            
            // using MultipartFormDataContent content = new();

            // // Add form values
            // content.Add(new StringContent(Ticket.Title), "Title");
            // content.Add(new StringContent(Ticket.Description), "Description");
            

            // foreach (var file in Ticket.Attachments)
            // {
            //     // Add file attachment
            //     string safeFileName = WebUtility.HtmlEncode(file.Name);
            //     var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            //     fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);
            //     content.Add(fileContent, "Attachments", safeFileName);
            // }

            
            // List<IBrowserFile> files = Ticket.Attachments;

            // await _uploadService.UploadDocumentsAsync(files);

            // // // Send to API endpoint
            // // var response = await client.PostAsync("/upload", content);


            // // //   // Save locally
            // // // string safeFileName = WebUtility.HtmlEncode(file.FileName);
            // // // var path = Path.Combine(env.ContentRootPath, "images", safeFileName);
            // // // await using FileStream fs = new(path, FileMode.Create);
            // // // await file.CopyToAsync(fs);

            // // Message = response.IsSuccessStatusCode ? "Upload successful!" : response.ReasonPhrase;

            // // Ticket = new();  *@


